 
using System.Text;
using System.Threading;
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
namespace WindowsGame3
{
    class StaticRandom
    {

        /**/
        /*
      Draw

        NAME

                StaticRandomNumber -  A random Number Generator

        SYNOPSIS
                        Rand(int x, int y) - Returns a random x and y coordinate based on the number range
                        passed to it, to determine the position of an object inside the game area.

        DESCRIPTION

                Due to the other random number generator not producing random numbers with one, is thread safe. Allowing actual
                random numbers to be generated by giving each call a reference seed. Previously the random numbers were the same for most 
                instances due to how fast the objects were being created causing many spawning problems.
 
     

        AUTHOR

                //http://stackoverflow.com/questions/19270507/correct-way-to-use-random-in-multithread-application?noredirect=1&lq=1

        DATE

             10:00pm   8/9/2016

        */
        /**/
        public static class StaticRandomNumber
        {
            static int seed = Environment.TickCount;

            static readonly ThreadLocal<Random> random =
                new ThreadLocal<Random>(() => new Random(Interlocked.Increment(ref seed)));

            public static int Rand(int x, int y)
            {
                return random.Value.Next(x, y);
            }
        }
    }
}
